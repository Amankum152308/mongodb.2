const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());
 
const studentSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: { type: Number, required: true },
  course: { type: String, required: true }
});

const Student = mongoose.model("Student", studentSchema);
 
const studentController = {
  createStudent: async (req, res) => {
    try {
      const student = new Student(req.body);
      await student.save();
      res.status(201).json({ message: "Student created", student });
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  },

  getAllStudents: async (req, res) => {
    try {
      const students = await Student.find();
      res.json(students);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },

  getStudentById: async (req, res) => {
    try {
      const student = await Student.findById(req.params.id);
      if (!student) return res.status(404).json({ error: "Student not found" });
      res.json(student);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },

  updateStudent: async (req, res) => {
    try {
      const student = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
      if (!student) return res.status(404).json({ error: "Student not found" });
      res.json({ message: "Student updated", student });
    } catch (error) {
      res.status(400).json({ error: error.message });
    }
  },

  deleteStudent: async (req, res) => {
    try {
      const student = await Student.findByIdAndDelete(req.params.id);
      if (!student) return res.status(404).json({ error: "Student not found" });
      res.json({ message: "Student deleted" });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
};
 
app.post("/api/students", studentController.createStudent);
app.get("/api/students", studentController.getAllStudents);
app.get("/api/students/:id", studentController.getStudentById);
app.put("/api/students/:id", studentController.updateStudent);
app.delete("/api/students/:id", studentController.deleteStudent);
 
mongoose.connect("mongodb://127.0.0.1:27017/studentDB", {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log("âœ… MongoDB connected"))
  .catch(err => console.error(err));

 
app.listen(3000, () => console.log("ğŸš€ Server running on port 3000"));
